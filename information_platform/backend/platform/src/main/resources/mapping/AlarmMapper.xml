<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.demo.dao.AlarmMapper" >
  <resultMap id="BaseResultMap" type="com.example.demo.model.entity.Alarm" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="alarming_user" property="alarmingUser" jdbcType="VARCHAR" />
    <result column="alarmed_user" property="alarmedUser" jdbcType="VARCHAR" />
    <result column="alarm_type" property="alarmType" jdbcType="INTEGER" />
    <result column="time" property="time" jdbcType="TIMESTAMP" />
    <result column="reason" property="reason" jdbcType="VARCHAR" />
    <result column="view_type" property="viewType" jdbcType="INTEGER" />
    <result column="commend_id" property="commendId" jdbcType="INTEGER" />
    <result column="view_id" property="viewId" jdbcType="INTEGER" />
    <result column="task_id" property="taskId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, alarming_user, alarmed_user, alarm_type, time, reason, view_type, commend_id, 
    view_id, task_id
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.example.demo.model.entity.AlarmExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from Alarm
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from Alarm
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from Alarm
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.demo.model.entity.AlarmExample" >
    delete from Alarm
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.demo.model.entity.Alarm" >
    insert into Alarm (id, alarming_user, alarmed_user, 
      alarm_type, time, reason, 
      view_type, commend_id, view_id, 
      task_id)
    values (#{id,jdbcType=INTEGER}, #{alarmingUser,jdbcType=VARCHAR}, #{alarmedUser,jdbcType=VARCHAR}, 
      #{alarmType,jdbcType=INTEGER}, #{time,jdbcType=TIMESTAMP}, #{reason,jdbcType=VARCHAR}, 
      #{viewType,jdbcType=INTEGER}, #{commendId,jdbcType=INTEGER}, #{viewId,jdbcType=INTEGER}, 
      #{taskId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo.model.entity.Alarm" >
    insert into Alarm
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="alarmingUser != null" >
        alarming_user,
      </if>
      <if test="alarmedUser != null" >
        alarmed_user,
      </if>
      <if test="alarmType != null" >
        alarm_type,
      </if>
      <if test="time != null" >
        time,
      </if>
      <if test="reason != null" >
        reason,
      </if>
      <if test="viewType != null" >
        view_type,
      </if>
      <if test="commendId != null" >
        commend_id,
      </if>
      <if test="viewId != null" >
        view_id,
      </if>
      <if test="taskId != null" >
        task_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="alarmingUser != null" >
        #{alarmingUser,jdbcType=VARCHAR},
      </if>
      <if test="alarmedUser != null" >
        #{alarmedUser,jdbcType=VARCHAR},
      </if>
      <if test="alarmType != null" >
        #{alarmType,jdbcType=INTEGER},
      </if>
      <if test="time != null" >
        #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="reason != null" >
        #{reason,jdbcType=VARCHAR},
      </if>
      <if test="viewType != null" >
        #{viewType,jdbcType=INTEGER},
      </if>
      <if test="commendId != null" >
        #{commendId,jdbcType=INTEGER},
      </if>
      <if test="viewId != null" >
        #{viewId,jdbcType=INTEGER},
      </if>
      <if test="taskId != null" >
        #{taskId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.demo.model.entity.AlarmExample" resultType="java.lang.Integer" >
    select count(*) from Alarm
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update Alarm
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.alarmingUser != null" >
        alarming_user = #{record.alarmingUser,jdbcType=VARCHAR},
      </if>
      <if test="record.alarmedUser != null" >
        alarmed_user = #{record.alarmedUser,jdbcType=VARCHAR},
      </if>
      <if test="record.alarmType != null" >
        alarm_type = #{record.alarmType,jdbcType=INTEGER},
      </if>
      <if test="record.time != null" >
        time = #{record.time,jdbcType=TIMESTAMP},
      </if>
      <if test="record.reason != null" >
        reason = #{record.reason,jdbcType=VARCHAR},
      </if>
      <if test="record.viewType != null" >
        view_type = #{record.viewType,jdbcType=INTEGER},
      </if>
      <if test="record.commendId != null" >
        commend_id = #{record.commendId,jdbcType=INTEGER},
      </if>
      <if test="record.viewId != null" >
        view_id = #{record.viewId,jdbcType=INTEGER},
      </if>
      <if test="record.taskId != null" >
        task_id = #{record.taskId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update Alarm
    set id = #{record.id,jdbcType=INTEGER},
      alarming_user = #{record.alarmingUser,jdbcType=VARCHAR},
      alarmed_user = #{record.alarmedUser,jdbcType=VARCHAR},
      alarm_type = #{record.alarmType,jdbcType=INTEGER},
      time = #{record.time,jdbcType=TIMESTAMP},
      reason = #{record.reason,jdbcType=VARCHAR},
      view_type = #{record.viewType,jdbcType=INTEGER},
      commend_id = #{record.commendId,jdbcType=INTEGER},
      view_id = #{record.viewId,jdbcType=INTEGER},
      task_id = #{record.taskId,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.demo.model.entity.Alarm" >
    update Alarm
    <set >
      <if test="alarmingUser != null" >
        alarming_user = #{alarmingUser,jdbcType=VARCHAR},
      </if>
      <if test="alarmedUser != null" >
        alarmed_user = #{alarmedUser,jdbcType=VARCHAR},
      </if>
      <if test="alarmType != null" >
        alarm_type = #{alarmType,jdbcType=INTEGER},
      </if>
      <if test="time != null" >
        time = #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="reason != null" >
        reason = #{reason,jdbcType=VARCHAR},
      </if>
      <if test="viewType != null" >
        view_type = #{viewType,jdbcType=INTEGER},
      </if>
      <if test="commendId != null" >
        commend_id = #{commendId,jdbcType=INTEGER},
      </if>
      <if test="viewId != null" >
        view_id = #{viewId,jdbcType=INTEGER},
      </if>
      <if test="taskId != null" >
        task_id = #{taskId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.demo.model.entity.Alarm" >
    update Alarm
    set alarming_user = #{alarmingUser,jdbcType=VARCHAR},
      alarmed_user = #{alarmedUser,jdbcType=VARCHAR},
      alarm_type = #{alarmType,jdbcType=INTEGER},
      time = #{time,jdbcType=TIMESTAMP},
      reason = #{reason,jdbcType=VARCHAR},
      view_type = #{viewType,jdbcType=INTEGER},
      commend_id = #{commendId,jdbcType=INTEGER},
      view_id = #{viewId,jdbcType=INTEGER},
      task_id = #{taskId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>