<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.demo.dao.ViewsMapper" >
  <resultMap id="BaseResultMap" type="com.example.demo.model.entity.Views" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="content" property="content" jdbcType="VARCHAR" />
    <result column="time" property="time" jdbcType="TIMESTAMP" />
    <result column="puller" property="puller" jdbcType="VARCHAR" />
    <result column="tags" property="tags" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, title, content, time, puller, tags
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.example.demo.model.entity.ViewsExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from Views
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from Views
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from Views
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.demo.model.entity.ViewsExample" >
    delete from Views
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.demo.model.entity.Views" >
    insert into Views (id, title, content, 
      time, puller, tags
      )
    values (#{id,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, #{content,jdbcType=VARCHAR}, 
      #{time,jdbcType=TIMESTAMP}, #{puller,jdbcType=VARCHAR}, #{tags,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo.model.entity.Views" >
    insert into Views
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="title != null" >
        title,
      </if>
      <if test="content != null" >
        content,
      </if>
      <if test="time != null" >
        time,
      </if>
      <if test="puller != null" >
        puller,
      </if>
      <if test="tags != null" >
        tags,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="title != null" >
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="content != null" >
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="time != null" >
        #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="puller != null" >
        #{puller,jdbcType=VARCHAR},
      </if>
      <if test="tags != null" >
        #{tags,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.demo.model.entity.ViewsExample" resultType="java.lang.Integer" >
    select count(*) from Views
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update Views
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.title != null" >
        title = #{record.title,jdbcType=VARCHAR},
      </if>
      <if test="record.content != null" >
        content = #{record.content,jdbcType=VARCHAR},
      </if>
      <if test="record.time != null" >
        time = #{record.time,jdbcType=TIMESTAMP},
      </if>
      <if test="record.puller != null" >
        puller = #{record.puller,jdbcType=VARCHAR},
      </if>
      <if test="record.tags != null" >
        tags = #{record.tags,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update Views
    set id = #{record.id,jdbcType=INTEGER},
      title = #{record.title,jdbcType=VARCHAR},
      content = #{record.content,jdbcType=VARCHAR},
      time = #{record.time,jdbcType=TIMESTAMP},
      puller = #{record.puller,jdbcType=VARCHAR},
      tags = #{record.tags,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.demo.model.entity.Views" >
    update Views
    <set >
      <if test="title != null" >
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="time != null" >
        time = #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="puller != null" >
        puller = #{puller,jdbcType=VARCHAR},
      </if>
      <if test="tags != null" >
        tags = #{tags,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.demo.model.entity.Views" >
    update Views
    set title = #{title,jdbcType=VARCHAR},
      content = #{content,jdbcType=VARCHAR},
      time = #{time,jdbcType=TIMESTAMP},
      puller = #{puller,jdbcType=VARCHAR},
      tags = #{tags,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!--筛选给用户推荐的帖子-->
  <select id="getRecommend" parameterType="java.lang.Integer" resultType="com.example.demo.model.entity.Views" >
    select
    <include refid="Base_Column_List" />
    from Views
    where  tags = #{tags,jdbcType=INTEGER} and id in (select view_id from Likes group by view_id having count(*)>20 )
    order by time desc
  </select>

  <!--获取帖子点赞数-->
  <select id="getLikeNum" parameterType="java.lang.Integer" resultType="java.lang.Integer" >
    select
    count(*)
    from Likes
    where  view_id = #{0}
    group by view_id
  </select>

  <!--获取帖子评论数-->
  <select id="getCommentNum" parameterType="java.lang.Integer" resultType="java.lang.Integer" >
    select
    count(*)
    from Comments
    where  view_id = #{0}
    group by view_id
  </select>

  <!--获取最新回复的帖子-->
  <select id="getNewReply" parameterType="java.lang.Integer" resultType="com.example.demo.model.databaseResulttype.NewReply" >
    select
    V.id,V.tags,V.title,V.puller,V.time,MAX(Comments.time) as commenttime
    from Comments inner join Views V on Comments.view_id = V.id
    where V.tags = #{0} and V.time > date_add(now(), interval -2 day)
    group by V.id
    order by Max(Comments.time) desc
  </select>

  <!--获取最新发布的帖子-->
  <select id="getNewPublish" parameterType="java.lang.Integer" resultType="com.example.demo.model.databaseResulttype.NewPublish" >
    select
    id,tags,title,puller,time
    from Views
    where tags = #{0} and time > date_add(now(), interval -2 day)
    order by time desc
  </select>

  <!--获取版块精华的帖子-->
  <select id="getBest" parameterType="java.lang.Integer" resultType="com.example.demo.model.databaseResulttype.Best" >
    select
    V.id,V.tags,V.title,V.puller,V.time
    from Likes inner join Views V on Likes.view_id = V.id
    where V.tags = #{0}
    group by V.id
    having count(*) > 30
    order by V.time desc
  </select>

  <!--获取版块全部的帖子-->
  <select id="getAll" parameterType="java.lang.Integer" resultType="com.example.demo.model.databaseResulttype.All" >
    select
    id,tags,title,puller,time
    from Views
    where tags = #{0} and time > date_add(now(), interval -60 day)
    order by time desc
  </select>
</mapper>